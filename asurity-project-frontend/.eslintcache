[{"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/index.tsx":"1","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/reportWebVitals.ts":"2","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/App.tsx":"3","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactRow.tsx":"4","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactGrid.tsx":"5","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactForm.tsx":"6","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/SortButton.tsx":"7","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactFormNew.tsx":"8","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/formInputs/TextInput.tsx":"9","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/Constants.tsx":"10"},{"size":519,"mtime":1611023016696,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1610842611000,"results":"13","hashOfConfig":"12"},{"size":4607,"mtime":1611098213449,"results":"14","hashOfConfig":"12"},{"size":1190,"mtime":1611096662154,"results":"15","hashOfConfig":"12"},{"size":1792,"mtime":1611096319520,"results":"16","hashOfConfig":"12"},{"size":5034,"mtime":1610946974109,"results":"17","hashOfConfig":"18"},{"size":797,"mtime":1611094219641,"results":"19","hashOfConfig":"12"},{"size":3920,"mtime":1611009881519,"results":"20","hashOfConfig":"12"},{"size":639,"mtime":1611008930613,"results":"21","hashOfConfig":"12"},{"size":75,"mtime":1611009659424,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1drqmq5",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1at9pn4",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/index.tsx",[],["48","49"],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/reportWebVitals.ts",[],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/App.tsx",["50","51","52","53"],"import React, {MouseEvent} from 'react';\n//@ts-ignore\nimport {LoopCircleLoading} from 'react-loadingg'; \nimport '../styling/App.css';\nimport ContactGrid from './ContactGrid';\nimport ContactFormNew from './ContactFormNew';\nimport * as Constants from '../Constants';\n\n\nexport interface Props {}\n\ninterface State {\n  view : View;\n  contacts: Contact[];\n  isLoading: boolean;\n  stateSelections: UsState[];\n  contactMethods: ContactMethod[];\n  contactFrequencies: ContactFrequency[];\n  //error: string | null;\n}\n\ntype View = 'contact grid' | 'contact form' | 'edit form'\n\nexport interface Contact {\nid: number,\nfirstName: string,\nlastName: string,\nemail: string,\nphoneNumber: string,\nstreetAddress: string,\ncity: string,\nstate: string,\nzipcode: string,\ncontactFrequency: number,\ncontactMethod: number\n}\nexport interface UsState {\n  id: number,\n  fullName: string,\n  abbreviation: string\n}\nexport interface ContactMethod {\n  id: number,\n  method: string\n}\n\nexport interface ContactFrequency {\n  id: number,\n  frequency: string\n}\nclass App extends React.Component<Props, State> {\n  constructor (props: Props) {\n    super(props);\n    this.state = { \n      view: 'contact grid',\n      isLoading: false,\n      //error: null,\n      contacts: [],\n      stateSelections: [],\n      contactMethods: [],\n      contactFrequencies: []\n    };\n  }\n\n  updateStateName (contact: Contact): void {\n    let stateFullName = this.state.stateSelections.find((stateData:UsState) => stateData.abbreviation === contact.state)?.fullName;\n    contact.state = stateFullName!;\n  }\n\n  //view handlers\n  newContactClickHandler = () => {\n    if (this.state.view != 'contact form') {\n      this.setState({view: 'contact form' });\n    }\n  } \n\n  gridViewHandler = () => {\n    if (this.state.view != 'contact grid') {\n      this.setState({view: 'contact grid'});\n    }\n  } \n\n  editContactHandler = () => {\n    if (this.state.view != 'edit form') {\n      this.setState({view: 'edit form'});\n    }\n  } \n\n //not sure how to get around this TypeScript Index Signature issue, need to investigate further\n  sortContacts = (dataPoint:string, sort: 'asc'|'desc') => {\n    let sortedList: Contact[] = [...this.state.contacts];\n    if ( sort === 'asc') {\n      //@ts-ignore\n      sortedList.sort((a,b) => a[dataPoint] > b[dataPoint] ? 1 : b[dataPoint] > a[dataPoint] ? -1 : 0);\n    } else {\n      //@ts-ignore\n      sortedList.sort((a,b) => a[dataPoint] < b[dataPoint] ? 1 : b[dataPoint] < a[dataPoint] ? -1 : 0);\n    }\n    this.setState({contacts: sortedList})\n  }\n\n  //add a confirmation modal if there is time\n  deleteContact = (id: number) => {\n    fetch(Constants.API + \"contacts/\" + id, {\n      method: 'DELETE'\n    }).then(() => {\n      let updatedContactList = this.state.contacts.filter(contact => contact.id !== id);\n      this.setState({contacts: updatedContactList});\n    })\n  }\n\n  //contact population and state name population\n  async getStateInfoAndContacts () {\n  await fetch(Constants.API + \"states\")\n    .then(response => response.json())\n    .then(data => this.setState({stateSelections: data}));\n\n  await fetch(Constants.API + \"contacts\")\n    .then(response =>response.json())\n    .then(contacts => {\n      contacts.forEach((contact: Contact) => {\n        this.updateStateName(contact);\n      });\n      this.setState({contacts: contacts, isLoading: false})\n    });\n  }\n\n  async componentDidMount () {\n    //loading\n    this.setState({isLoading: true})\n\n    //fetch dropdown selection data\n    fetch(Constants.API + \"contactMethods\")\n    .then(response => response.json())\n    .then(data => this.setState({contactMethods: data}));\n\n    fetch(Constants.API + \"contactFrequencies\")\n    .then(response => response.json())\n    .then(data => this.setState({contactFrequencies: data}));\n\n    //fetch contacts and US states\n    this.getStateInfoAndContacts();\n  }\n\n  render () {\n    let gridProps = {\n      contacts: this.state.contacts,\n      sortContacts: this.sortContacts,\n      deleteContact: this.deleteContact\n    };\n\n    let mainViewComponent;\n\n    if (this.state.isLoading) {\n      mainViewComponent = <LoopCircleLoading />;\n    } else if (this.state.view === 'contact form'){\n      mainViewComponent = <ContactFormNew />;\n    } else {\n      mainViewComponent = <ContactGrid {...gridProps}/>;\n    }\n    return (\n        <div className=\"App-Container\">\n          <header className=\"App-header\">\n            <span onClick={this.gridViewHandler}>All Contacts</span>\n            <span onClick={this.newContactClickHandler} >New Contact</span>\n          </header>\n          {mainViewComponent}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactRow.tsx",[],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactGrid.tsx",["54"],"import React from 'react';\nimport ContactRow from './ContactRow';\nimport SortButton from './SortButton';\nimport '../styling/ContactGrid.css';\nimport '../styling/ContactRow.css';\n//import Contact from './App';\n\ninterface GridProps {\n    contacts: Contact[];\n    sortContacts: (dataPoint:string, sort: 'asc'|'desc') => void;\n    deleteContact: (id:number) => void;\n\n}\ninterface Contact {\nid: number,\nfirstName: string,\nlastName: string,\nemail: string,\nphoneNumber: string,\nstreetAddress: string,\ncity: string,\nstate: string,\nzipcode: string,\ncontactFrequency: number,\ncontactMethod: number\n}\n\nclass ContactGrid extends React.Component<GridProps> {\n    constructor(props: GridProps){\n        super(props);\n    }\n\n    \n    render () {\n        const contacts = this.props.contacts;\n\n        return(\n            <div className=\"Grid-Outline\">\n                <div className=\"Column-Titles\">\n                    <div className=\"Column-Name\">First Name <SortButton sortContacts={this.props.sortContacts} sortBy='firstName' /> </div>\n                    <div className=\"Column-Name\">Last Name <SortButton sortContacts={this.props.sortContacts} sortBy='lastName' /> </div>\n                    <div className=\"Column-Name\">City <SortButton sortContacts={this.props.sortContacts} sortBy='city' /> </div>\n                    <div className=\"Column-Name\">State <SortButton sortContacts={this.props.sortContacts} sortBy='state' /> </div>\n                    <div className=\"Column-Name\">Phone Number<SortButton sortContacts={this.props.sortContacts} sortBy='phoneNumber' /> </div>\n                </div>\n                {contacts.map(contact => <ContactRow key={contact.id} contact={contact} deleteContact={this.props.deleteContact}/>)}\n            </div>\n        )\n    }\n    \n}\n\nexport default ContactGrid;","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactForm.tsx",["55","56","57","58"],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/SortButton.tsx",["59","60"],"import { ReactSVGElement } from \"react\";\n\ninterface SortButtonProps {\n    sortContacts: (dataPoint:string, sort: 'asc'|'desc') => void;\n    sortBy: string;\n}\n\ninterface Contact {\nid: number,\nfirstName: string,\nlastName: string,\nemail: string,\nphoneNumber: string,\nstreetAddress: string,\ncity: string,\nstate: string,\nzipcode: string,\ncontactFrequency: number,\ncontactMethod: number\n}\n\n\nconst SortButton: React.FC<SortButtonProps> = (props) => {\n    let sortAscCallback = () => props.sortContacts(props.sortBy, \"asc\");\n    let sortDescCallback = () => props.sortContacts(props.sortBy, \"desc\");\n    \n    return(\n        <span>\n            <button onClick ={sortAscCallback}>▲</button>\n            <button onClick ={sortDescCallback}>▼</button>\n        </span>\n    );\n}\n\nexport default SortButton;","/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/ContactFormNew.tsx",[],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/components/formInputs/TextInput.tsx",[],["61","62"],"/Users/andrewrivera/development/asurity/asurity-coding-project/asurity-project-frontend/src/Constants.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":16,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"72","line":72,"column":25,"nodeType":"73","messageId":"74","endLine":72,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":78,"column":25,"nodeType":"73","messageId":"74","endLine":78,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":84,"column":25,"nodeType":"73","messageId":"74","endLine":84,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":29,"column":5,"nodeType":"77","messageId":"78","endLine":31,"endColumn":6},{"ruleId":"67","severity":1,"message":"79","line":27,"column":7,"nodeType":"69","messageId":"70","endLine":27,"endColumn":52},{"ruleId":"67","severity":1,"message":"80","line":28,"column":7,"nodeType":"69","messageId":"70","endLine":28,"endColumn":49},{"ruleId":"67","severity":1,"message":"81","line":29,"column":7,"nodeType":"69","messageId":"70","endLine":29,"endColumn":39},{"ruleId":"67","severity":1,"message":"82","line":57,"column":7,"nodeType":"69","messageId":"70","endLine":57,"endColumn":15},{"ruleId":"67","severity":1,"message":"83","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"84","line":8,"column":11,"nodeType":"69","messageId":"70","endLine":8,"endColumn":18},{"ruleId":"63","replacedBy":"85"},{"ruleId":"65","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'MouseEvent' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'contactMethodValues' is assigned a value but never used.","'contactFrequencyValues' is assigned a value but never used.","'usStateDropdownValues' is assigned a value but never used.","'validate' is assigned a value but never used.","'ReactSVGElement' is defined but never used.","'Contact' is defined but never used.",["87"],["88"],"no-global-assign","no-unsafe-negation"]